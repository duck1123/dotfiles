{:tasks
 {:requires ([babashka.fs :as fs]
             [clojure.edn :as edn]
             [clojure.string :as str])

  build
  {:depends [build-home build-os]}

  build-home
  {:task (shell "nh home build .")}

  build-os
  {:task (shell "nh os build .")}

  install-cert-manager
  {:task
   (let [version "1.14.4"
         url     (format "https://github.com/cert-manager/cert-manager/releases/download/v%s/cert-manager.yaml"
                         version)]
     (shell (format "kubectl apply -f %s" url)))}

  list-secret-keys
  {:description "List gpg secret keys"
   :task        (shell "gpg --list-secret-keys --keyid-format=long")}

  make-chart-repo
  {:description "Install repo into cluster"
   :task
   (do
     (println "make chart repo")
     (let [name ""
           url  ""
           data {:apiVersion "catalog.cattle.io/v1"
                 :kind       "ClusterRepo"
                 :metadata   {:name name}
                 :spec       {:url url}}]
       data))}

  read-windows-key
  {:description "Read windows key from firmware"
   :task
   (shell "sudo grep -Eao '(-?[A-Z0-9]{5}){5}' /sys/firmware/acpi/tables/MSDM")}

  switch
  {:depends [switch-home switch-os]}

  switch-home
  {:decription "Update home-manager from flake"
   :task       (shell "nh home switch .")}

  switch-os
  {:decription "Update nixos from flake"
   :task       (shell "nh os switch .")}

  k3d-create-registry
  {:task
   (shell "k3d registry create myregistry.localtest.me --port 12345")}

  k3d-create
  {:description "Create a k3d cluster"
   :task
   (let [dry-run?         false
         use-ingress      false
         create-registry? false
         use-registry?    true
         api-port         6550
         registry-name    "registry"
         registry-host    "k3d-myregistry.localtest.me:12345"
         server-count     1
         cmd              (clojure.string/join
                           " "
                           ["k3d cluster create"
                            "--api-port" api-port
                            "-p \"80:80@loadbalancer\""
                            "-p \"443:443@loadbalancer\""
                            (when-not use-ingress "--k3s-arg \"--disable=traefik@server:0\"")
                            "--servers" server-count
                            (when create-registry?
                              (str "--registry-create " registry-name))
                            (when use-registry?
                              (str "--registry-use " registry-host))
                            "--kubeconfig-update-default"])]
     (if dry-run?
       (println cmd)
       (shell cmd)))}

  k3d-delete
  {:description "Delete k3d cluster"
   :task        (shell "k3d cluster delete k3s-default")}

  k3d-start
  {:task (shell "k3d cluster start")}

  k3d-stop
  {:task (shell "k3d cluster stop")}

  install-argocd
  {:task
   (do
     (println "Installing argocd")
     (let [dry-run? false
           url      "https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"
           commands ["kubectl create namespace argocd"
                     (str "kubectl apply -n argocd -f " url)]]
       (doseq [command commands]
         (if dry-run?
           (println command)
           (shell command)))))}

  install-charts
  {:task
   (let [dry-run? false]
     (doseq [{:keys [name url]} (edn/read-string (slurp "./helm_charts.edn"))]
       (let [command (str "helm repo add " name " " url)]
         (if dry-run?
           (println (str "[DRY-RUN] " command))
           (shell command)))))}

  install-consul
  {:task
   (let [replicas     1
         ingress-host "consul.localhost"]
     (shell
      (clojure.string/join
       " "
       ["consul-k8s install "
        (str "--set server.replicas=" replicas)
        "--set ui.ingress.enabled=true "
        (format "--set \"ui.ingress.hosts[0].host=%s\"" ingress-host)
        "--set \"ui.ingress.hosts[0].paths[0]=/\""
        "--set connectInject.enabled=true"
        "--set connectInject.default=true"
        "--set controller.enabled=true"])))}

  install-rancher
  {:task
   (let [namespace     "cattle-system"
         hostname      "rancher.dev.kronkltd.net"
         email         "duck@kronkltd.net"
         replica-count 1
         cmd           (clojure.string/join
                        " "
                        ["helm install rancher rancher-latest/rancher "
                         (format "--namespace %s" namespace)
                         (format "--set hostname=%s" hostname)
                         (format "--set replicas=%s" replica-count)
                         (format "--set ingress.tls.source=%s" "letsEncrypt")
                         (format "--set letsEncrypt.email=%s" email)])]
     (println cmd)
     (shell cmd))}

  install-traefik
  {:task (shell "helm install traefik traefik/traefik")}

  show-ports
  {:task (shell "netstat -ltnp")}

  update-nix
  {:task (shell "nix-channel --update")}

  watch-namespaces
  {:task (shell "watch kubectl get namespaces")}

  watch-pods
  {:task (shell "watch kubectl get pods --all-namespaces")}

  wipe-k3s
  {:doc  "Wipe k3s directories"
   :task (do
           (shell "sudo rm -rf /etc/rancher/k3s")
           (shell "sudo rm -rf /var/lib/rancher/k3s"))}}}
